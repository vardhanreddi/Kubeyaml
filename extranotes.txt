EmptyDir=====

An emptyDir volume is first created when a Pod is assigned to a Node, and exists as long as that Pod is running on that node.

As the name says, it is initially empty. All Containers in the same Pod can read and write in the same emptyDir volume.

When a Pod is restarted or removed, the data in the emptyDir is lost forever.

Some use cases for an emptyDir are:

    scratch space, for a sort algorithm for example

    when a long computation needs to be done in memory

    as a cache
Note: emptyDir volume should NOT be used for persisting data (database, application data, etc)
======Hostpath=====
A hostPath volume mounts a file or directory from the node's filesystem into the Pod. You can specify whether the file/directory must already exist on the node or should be created on pod startup. You can do it using a type attribute in the config file:

========deployments=====

features
Multiple replicas
Upgrade
Rollback
Scale up or scale down
Pause and resume

Deploymnet Types
Recreate 
Rolling upgrade
Canary
Canary deployment strategy involves deploying new versions of an application next to stable production versions to see how the canary version compares against the baseline before promoting or rejecting the deployment.
Blue/Green -->
A Blue/Green deployment is a way of accomplishing a zero-downtime upgrade to an existing application. The “Blue” version is the currently running copy of the application and the “Green” version is the new version. Once the green version is ready, traffic is rerouted to the new version.

===There are 2 types for updating the pods from one version to another version

kubectl set images deployment <deploymentnanme> <containername>=nginx:<version>

or 

kubectl edit deploy <deploymentname>

to check the status of the deploymney 

 kubectl rollout status deployment/<deployname>

to list all the deploymnets

kubectl get deploy 

to get deployment history 
kubectl rollout history deploment/<dpname>

to rollback --use undo command 

kubectl rollout undo deployment/<deplname>

scaling up ---

kubectl scale deploymnet <deploymnetname>  --replicas=5


=====namespaces=====

how to create a namespace
kubectl create namespace <namespacename>
ex: kubectl create namespace dev

by default there will be 3 namapaces will create 
default
kube-system
kube-public

how to switch namespace permanently to dev

kubectl config set-context $(kubectl config current-context) --namespace=dev


















